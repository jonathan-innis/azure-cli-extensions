resources:
  repositories:
  - repository: K8sPartnerExtensionTest
    type: git
    endpoint: K8sPartnerExtension
    name: One/compute-HybridMgmt-K8sPartnerExtensionTest

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

parameters:
  - name: subscriptionId
    type: string
    default: '37524548-5887-4df0-a359-38a687fdb3bc'
  - name: tenantId
    type: string
    default: '72f988bf-86f1-41af-91ab-2d7cd011db47'
  - name: clientId
    type: string
    default: '0646c919-c502-4038-9ac6-37de3ec23b50'
  - name: clientSecret
    type: string
    default: ''

variables:
  K8S_EXTENSION_REPO_PATH: $(Agent.BuildDirectory)/s/compute-HybridMgmt-K8sPartnerExtensionTest
  CLI_REPO_PATH: $(Agent.BuildDirectory)/s/azure-cli-extensions
  EXTENSION_NAME: "k8sconfiguration"
  SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
  TENANT_ID: ${{ parameters.tenantId }}
  CLIENT_ID: ${{ parameters.clientId }}
  CLIENT_SECRET: ${{ parameters.clientSecret }}

  RESOURCE_GROUP: "DevTestingAgent"
  BASE_CLUSTER_NAME: "k8s-extension-cluster"
  K8S_EXTENSION_VERSION: "0.3.0"

jobs:
- job: K8sExtensionIntegrationTest 
  displayName: "k8-extension Integration Test Suite"
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - checkout: self
    - checkout: K8sPartnerExtensionTest
    
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.6'
      inputs:
        versionSpec: 3.6
    - bash: |
        set -ev

        # prepare and activate virtualenv
        pip install virtualenv
        python3 -m venv env/
        source env/bin/activate

        # clone azure-cli
        pip install azdev

        ls $(CLI_REPO_PATH)

        azdev --version
        azdev setup -r $(CLI_REPO_PATH) -e $(EXTENSION_NAME)
        azdev extension build $(EXTENSION_NAME)

      workingDirectory: $(CLI_REPO_PATH)
      displayName: "Setup and Build $(EXTENSION_NAME) with azdev"
    
    - bash: |
        K8S_EXTENSION_VERSION=$(ls $(EXTENSION_NAME)* | cut -d "-" -f2)
        echo "##vso[task.setvariable variable=K8S_EXTENSION_VERSION]$K8S_EXTENSION_VERSION"
        cp * $(K8S_EXTENSION_REPO_PATH)/extensions
      workingDirectory: $(CLI_REPO_PATH)/dist
      displayName: "Copy the Built .whl to Extension Test Path"

    - bash: |
        RAND_STR=$(((RANDOM % 10000)+ 1))
        AKS_CLUSTER_NAME=$(BASE_CLUSTER_NAME)-$(RAND_STR)-aks
        ARC_CLUSTER_NAME=$(BASE_CLUSTER_NAME)-$(RAND_STR)-arc

        JSON_STRING=$(jq -n \
                         --arg SUB_ID "$SUBSCRIPTION_ID" \
                         --arg RG "$RESOURCE_GROUP" \
                         --arg AKS_CLUSTER_NAME "$AKS_CLUSTER_NAME" \
                         --arg ARC_CLUSTER_NAME "$ARC_CLUSTER_NAME" \
                         --arg K8S_EXTENSION_VERSION "$K8S_EXTENSION_VERSION" \
                         '{subscriptionId: $SUB_ID, resourceGroup: $RG, aksClusterName: $AKS_CLUSTER_NAME, arcClusterName: $ARC_CLUSTER_NAME, extensionVersion: {k8s-extension: $K8S_EXTENSION_VERSION, connectedk8s: "0.3.5"}}')
        cat JSON_STRING > settings.json
        cat settings.json
      workingDirectory: $(K8S_EXTENSION_REPO_PATH)
      displayName: "Generate a settings.json file"

    # - task: AzureCLI@2
    #   displayName: Azure CLI
    #   inputs:
    #     azureSubscription: <Name of the Azure Resource Manager service connection>
    #     scriptType: ps
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az login
    #       az account show

    # - powershell:
        