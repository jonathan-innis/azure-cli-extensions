resources:
  repositories:
  - repository: K8sPartnerExtensionTest
    type: git
    endpoint: K8sPartnerExtension
    name: One/compute-HybridMgmt-K8sPartnerExtensionTest

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  K8S_EXTENSION_REPO_PATH: $(Agent.BuildDirectory)/s/compute-HybridMgmt-K8sPartnerExtensionTest
  CLI_REPO_PATH: $(Agent.BuildDirectory)/s/azure-cli-extensions
  EXTENSION_NAME: "k8sconfiguration"
  SUBSCRIPTION_ID: "37524548-5887-4df0-a359-38a687fdb3bc"
  RESOURCE_GROUP: "K8sPartnerExtensionTest"
  BASE_CLUSTER_NAME: "k8s-extension-cluster"

jobs:
- job: K8sExtensionTestSuite
  displayName: "Run K8sPartnerExtension Test Suite"
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - checkout: self
    - checkout: K8sPartnerExtensionTest

    - bash: |
        echo "Installing helm3"
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

        echo "Installing kubectl"
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client
      displayName: "Setup the VM with helm3 and kubectl" 
    
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.6'
      inputs:
        versionSpec: 3.6
    - bash: |
        set -ev

        # prepare and activate virtualenv
        pip install virtualenv
        python3 -m venv env/
        source env/bin/activate

        # clone azure-cli
        pip install azdev

        ls $(CLI_REPO_PATH)

        azdev --version
        azdev setup -r $(CLI_REPO_PATH) -e $(EXTENSION_NAME)
        azdev extension build $(EXTENSION_NAME)

      workingDirectory: $(CLI_REPO_PATH)
      displayName: "Setup and Build $(EXTENSION_NAME) with azdev"
    
    - bash: |
        # K8S_EXTENSION_VERSION=$(ls $(EXTENSION_NAME)* | cut -d "-" -f2)
        K8S_EXTENSION_VERSION="0.1.0"
        echo "##vso[task.setvariable variable=K8S_EXTENSION_VERSION]$K8S_EXTENSION_VERSION"
        cp * $(K8S_EXTENSION_REPO_PATH)/extensions
      workingDirectory: $(CLI_REPO_PATH)/dist
      displayName: "Copy the Built .whl to Extension Test Path"

    - bash: |
        RAND_STR=$(((RANDOM % 10000)+ 1))
        AKS_CLUSTER_NAME="${BASE_CLUSTER_NAME}-${RAND_STR}-aks"
        ARC_CLUSTER_NAME="${BASE_CLUSTER_NAME}-${RAND_STR}-arc"

        JSON_STRING=$(jq -n \
                         --arg SUB_ID "$SUBSCRIPTION_ID" \
                         --arg RG "$RESOURCE_GROUP" \
                         --arg AKS_CLUSTER_NAME "$AKS_CLUSTER_NAME" \
                         --arg ARC_CLUSTER_NAME "$ARC_CLUSTER_NAME" \
                         --arg K8S_EXTENSION_VERSION "$K8S_EXTENSION_VERSION" \
                         '{subscriptionId: $SUB_ID, resourceGroup: $RG, aksClusterName: $AKS_CLUSTER_NAME, arcClusterName: $ARC_CLUSTER_NAME, extensionVersion: {"k8s-extension": $K8S_EXTENSION_VERSION, connectedk8s: "0.3.5"}}')
        echo $JSON_STRING > settings.json
        cat settings.json
      workingDirectory: $(K8S_EXTENSION_REPO_PATH)
      displayName: "Generate a settings.json file"

    - task: AzureCLI@2
      displayName: Bootstrap the Clusters
      inputs:
        azureSubscription: K8sPartnerExtensionCLI
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          .\Bootstrap.ps1
        workingDirectory: $(K8S_EXTENSION_REPO_PATH)
    
    - task: AzureCLI@2
      displayName: Run the Test Suite
      inputs:
        azureSubscription: K8sPartnerExtensionCLI
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          .\Test.ps1 -IsPipeline
        workingDirectory: $(K8S_EXTENSION_REPO_PATH)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/testResults.xml'
        failTaskOnFailedTests: true
        continueOnError: true

    - task: AzureCLI@2
      displayName: Cleanup the Clusters
      inputs:
        azureSubscription: K8sPartnerExtensionCLI
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          .\Cleanup.ps1
        workingDirectory: $(K8S_EXTENSION_REPO_PATH)